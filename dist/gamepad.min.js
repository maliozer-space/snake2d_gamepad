/*!
 * gamepad.js 0.1.0
 * https://github.com/Tom32i/gamepad.js
 * Copyright 2014 Thomas JARRAND
 */

function EventEmitter(){this._events={}}function OptionResolver(t){this.allowExtra="undefined"!=typeof t&&t,this.defaults={},this.types={},this.optional=[],this.required=[]}function GamepadHandler(t,e){EventEmitter.call(this),this.gamepad=t,this.options=this.resolveOptions("object"==typeof e?e:{}),this.sticks=new Array(this.gamepad.axes.length),this.buttons=new Array(this.gamepad.buttons.length);for(var i=this.sticks.length-1;i>=0;i--)this.sticks[i]=[0,0];for(var n=this.buttons.length-1;n>=0;n--)this.buttons[n]=0;this.gamepad.handler=this}function GamepadListener(t){EventEmitter.call(this),this.options="object"==typeof t?t:{},this.frame=null,this.update=this.update.bind(this),this.onAxis=this.onAxis.bind(this),this.onButton=this.onButton.bind(this),this.stop=this.stop.bind(this),this.handlers=new Array(4),window.addEventListener("error",this.stop)}EventEmitter.prototype.emit=function(t,e){if("undefined"!=typeof this._events[t])for(var i=this._events[t],n=i.length,o={type:t,detail:e},s=0;n>s;s++)i[s](o)},EventEmitter.prototype.addEventListener=function(t,e){"undefined"==typeof this._events[t]&&(this._events[t]=[]),this._events[t].indexOf(e)<0&&this._events[t].push(e)},EventEmitter.prototype.removeEventListener=function(t,e){if("undefined"!=typeof this._events[t]){var i=this._events[t],n=i.indexOf(e);n>=0&&i.splice(n,1),i.length||delete this._events[t]}},EventEmitter.prototype.on=EventEmitter.prototype.addEventListener,EventEmitter.prototype.off=EventEmitter.prototype.removeEventListener,OptionResolver.prototype.setDefaults=function(t){for(var e in t)t.hasOwnProperty(e)&&(this.defaults[e]=t[e]);return this},OptionResolver.prototype.setTypes=function(t){for(var e in t)t.hasOwnProperty(e)&&(this.types[e]=t[e]);return this},OptionResolver.prototype.setOptional=function(t){return this.allowExtra?void 0:(this.addToArray(this.optionals,t),this)},OptionResolver.prototype.setRequired=function(t){return this.addToArray(this.required,t),this},OptionResolver.prototype.resolve=function(t){var e={};for(var i in this.defaults)this.defaults.hasOwnProperty(i)&&(e[i]=this.getValue(t,i));for(var n=this.required.length-1;n>=0;n--)if(i=this.required[n],"undefined"==typeof e[i])throw'Option "'+i+'" is required.';return e},OptionResolver.prototype.getValue=function(t,e){var i=null;if(!this.optionExists(e))throw'Unkown option "'+e+'".';return"undefined"!=typeof t[e]?i=t[e]:"undefined"!=typeof this.defaults[e]&&(i=this.defaults[e]),this.checkType(e,i),i},OptionResolver.prototype.checkType=function(t,e){var i="undefined"!=typeof this.types[t]?this.types[t]:!1,n=typeof e;if(i&&n!==i&&("string"===i&&(e=String(e)),"boolean"===i&&(e=Boolean(e)),"number"===i&&(e=Number(e)),n=typeof e,i!==n))throw'Wrong type for option "'+t+'". Expected '+this.types[t]+" but got "+typeof e},OptionResolver.prototype.optionExists=function(t){return this.allowExtra?!0:"undefined"!=typeof this.defaults[t]||this.optional.indexOf(t)>=0||this.required.indexOf(t)>=0},OptionResolver.prototype.addToArray=function(t,e){for(var i,n=e.length-1;n>=0;n--)i=e[n],t.indexOf(i)>=0&&t.push(i)},GamepadHandler.prototype=Object.create(EventEmitter.prototype),GamepadHandler.prototype.optionResolver=new OptionResolver(!1),GamepadHandler.prototype.optionResolver.setDefaults({analog:!0,deadZone:0,precision:0}),GamepadHandler.prototype.optionResolver.setTypes({analog:"boolean",deadZone:"number",precision:"number"}),GamepadHandler.prototype.resolveOptions=function(t){var e="undefined"!=typeof t.stick,i="undefined"!=typeof t.button,n={stick:this.optionResolver.resolve(e?t.stick:i?{}:t),button:this.optionResolver.resolve(i?t.button:e?{}:t)};return n.stick.deadZone=Math.max(Math.min(n.stick.deadZone,1),0),n.button.deadZone=Math.max(Math.min(n.button.deadZone,1),0),n.stick.precision=n.stick.precision?Math.pow(10,n.stick.precision):0,n.button.precision=n.button.precision?Math.pow(10,n.button.precision):0,n},GamepadHandler.prototype.update=function(){var t=0,e=0,i=0;for(e=0;2>e;e++)for(i=0;2>i;i++)this.setStick(e,i,this.gamepad.axes[t],this.options.stick),t++;for(t=this.gamepad.buttons.length-1;t>=0;t--)this.setButton(t,this.gamepad.buttons[t],this.options.button)},GamepadHandler.prototype.setStick=function(t,e,i,n){n.deadZone&&i<n.deadZone&&i>-n.deadZone&&(i=0),n.analog?n.precision&&(i=Math.round(i*n.precision)/n.precision):i=i>0?1:0>i?-1:0,this.sticks[t][e]!==i&&(this.sticks[t][e]=i,this.emit("axis",{gamepad:this.gamepad,axis:e,value:this.sticks[t][e]}))},GamepadHandler.prototype.setButton=function(t,e,i){var n=e.value;i.deadZone&&e.value<i.deadZone&&e.value>-i.deadZone&&(n=0),i.analog?i.precision&&(n=Math.round(n*i.precision)/i.precision):n=e.pressed?1:0,this.buttons[t]!==n&&(this.buttons[t]=n,this.emit("button",{gamepad:this.gamepad,button:e,index:t,pressed:e.pressed,value:n}))},GamepadListener.prototype=Object.create(EventEmitter.prototype),GamepadListener.prototype.start=function(){this.frame||this.update()},GamepadListener.prototype.stop=function(){this.frame&&(window.cancelAnimationFrame(this.frame),this.frame=null)},GamepadListener.prototype.update=function(){this.frame=window.requestAnimationFrame(this.update);for(var t=this.getGamepads(),e=t.length-1;e>=0;e--)t[e]?("undefined"==typeof t[e].handler&&this.addGamepad(t[e]),t[e].handler.update()):this.handlers[e]&&this.removeGamepad(e)},GamepadListener.prototype.addGamepad=function(t){var e=new GamepadHandler(t,this.options);e.on("axis",this.onAxis),e.on("button",this.onButton),this.emit("gamepad:connected",{gamepad:t,index:t.index}),this.emit("gamepad:"+t.index+":connected",{gamepad:t,index:t.index}),this.handlers[t.index]=e},GamepadListener.prototype.removeGamepad=function(t){var e=this.handlers[t];e.off("axis",this.onAxis),e.off("button",this.onButton),this.emit("gamepad:disconnected",{index:t}),this.emit("gamepad:"+t+":disconnected",{index:t}),this.handlers[t]=null},GamepadListener.prototype.onAxis=function(t){this.emit("gamepad:axis",t.detail),this.emit("gamepad:"+t.detail.gamepad.index+":axis",t.detail),this.emit("gamepad:"+t.detail.gamepad.index+":axis:"+t.detail.axis,t.detail)},GamepadListener.prototype.onButton=function(t){this.emit("gamepad:button",t.detail),this.emit("gamepad:"+t.detail.gamepad.index+":button",t.detail),this.emit("gamepad:"+t.detail.gamepad.index+":button:"+t.detail.index,t.detail)},GamepadListener.prototype.getGamepads=function(){var t="undefined"!=typeof navigator.getGamepads?navigator.getGamepads():null;return t&&"object"==typeof t?t:[]};